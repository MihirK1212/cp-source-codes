#include <bits/stdc++.h>
using namespace std;

#define ll long long 
#define ld long double 
#define vll vector<long long>
#define vi vector<int>
#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define sort(a) sort(a.begin(),a.end());
#define rsort(a) sort(a.rbegin(),a.rend());
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}

ll inversions=0;

ll merge(vll &arr,ll lb, ll ub,ll mid) 
{
    ll local_iversions=0;
    ll l_pos=lb, r_pos=mid+1;

    vll curr_arr((ub-lb+1),0);
    ll k=0,i;

    while(k<(ub-lb+1))
    {
        if(l_pos>mid)
        {
            curr_arr[k]=arr[r_pos];
            k++;
            r_pos++;
        }
        
        else if(r_pos>ub)
        {
            curr_arr[k]=arr[l_pos];
            k++;
            l_pos++;
        }   
    
        else if(arr[l_pos]<=arr[r_pos])
        {
            curr_arr[k]=arr[l_pos];
            k++;
            l_pos++;
        }
        else
        {
            local_iversions+=(mid-l_pos+1);
            curr_arr[k]=arr[r_pos];
            k++;
            r_pos++;
        }
    }
    
    ll index=lb;
    
    for(i=0;i<k;i++) 
    {
        arr[index]=curr_arr[i];
        index++;
    }
    return local_iversions;
}

void mergesort(vll &arr,ll low,ll high)
{
    ll mid;
    if(low>=high)
    {
        return;
    }
    
    mid=(low+high)/2;
    
    mergesort(arr,low,mid);
    mergesort(arr,mid+1,high);
    inversions+=merge(arr,low,high,mid);
}


int main()
{ 
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL);
    
    ll n;
    cin>>n;
    vll a(n);
    
    input(a);
    
    mergesort(a,0,n-1);
    
    cout<<inversions<<"\n";
    
    return 0;
}
