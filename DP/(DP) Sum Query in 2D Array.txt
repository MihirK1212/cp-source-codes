int Solution::solve(vector<vector<int> > &A, int B) 
{
    int i,j;
    int m = A.size();
    int n = A[0].size();
    vector<vector<int>> p_sum(m+1,vector<int>(n+1));

    //p_sum[i][j] = sum for corners (0,0) to (i-1,j-1)

    for(i=0;i<=m;i++){p_sum[i][0]=0;}
    for(j=0;j<=n;j++){p_sum[0][j]=0;}

    for(i=1;i<=m;i++)
    {
        for(j=1;j<=n;j++)
        {
            p_sum[i][j] = p_sum[i-1][j] + p_sum[i][j-1] - p_sum[i-1][j-1] + A[i-1][j-1];
        }
    }

    int max_sum = -1e8;

    for(i=1;i<=m;i++)
    {
        for(j=1;j<=n;j++)
        {
           
            if(i-B >= 0 && j-B >= 0)
            {
                int sum = p_sum[i][j] - p_sum[i-B][j] - p_sum[i][j-B] + p_sum[i-B][j-B];
                max_sum = max(max_sum,sum);
            }

            
        }
    }

    return max_sum;

}
