// https://leetcode.com/problems/painting-the-walls/

class Solution {
public:
    
    int inf = 1e9;
    
    int findAns(vector<int>&value, vector<int>&cost, int n, int sum)
    {
        //find (i1, i2, i3,...im) s.t. (value[i1]+value[i2]+...value[im])>=sum and cost is minimum
        
        vector<vector<int>> dp(n+1, vector<int>(sum+1));
        //dp[i][s] = minimum cost for upto 'i' elements of the array for sum 's'
        
        for(int i=0; i<=n; i++) {
            for(int s=0; s<=sum; s++) {
                if(s==0) {
                    dp[i][s] = 0;
                    continue;
                }
                if(i==0) {
                    dp[i][s] = inf; 
                    continue;
                }
                
                int v1 = inf, v2 = inf;
                
                v1 = cost[i-1] + dp[i-1][max(s-value[i-1], 0)]; // we want >= hence we take max()
                v2 = dp[i-1][s];
                
                dp[i][s] = min(v1, v2);
            }
        }
        
        return dp[n][sum];
    }
    int paintWalls(vector<int>& cost, vector<int>& time) 
    {
        int n = cost.size();
        
        vector<int> modTime(n);
        for(int i=0; i<n; i++) {
            modTime[i] = time[i] + 1;
        }
        
        return findAns(modTime, cost, n, n);
    }
};