#include <bits/stdc++.h>
using namespace std;

#define ll long long 
#define ld long double 
#define vll vector<long long>
#define vi vector<int>
#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define sort(a) sort(a.begin(),a.end());
#define rsort(a) sort(a.rbegin(),a.rend());
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}
typedef vector<pair<ll,ll>> vpll;
typedef vector<pair<int,int>> vpii;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<int,pair<int,int>> ppi;

ll inf=std::numeric_limits<long long>::max();


bool dp[1001][1001];

void display(vector<int>&ss)
{
    for(int i=0;i<(ss.size());i++){cout<<ss[i]<<" ";}
    cout<<"\n";
    return;
}

void find_subsets(int*arr,int i,int s,vector<int>&ss)
{
    if(i==0 && s==0)
    {
        display(ss);
        ss.clear();
        return;
    }
    
    if(i>=1 && dp[i-1][s]) //without using ith element
    {
        vector<int> tmp = ss;
        find_subsets(arr,i-1,s,tmp);
    }
    
    if(i>=1 && s>=arr[i-1] && dp[i-1][s-arr[i-1]]) //using ith element
    {
        ss.pb(arr[i-1]);
        find_subsets(arr,i-1,s-arr[i-1],ss);
    }
}    

int main()
{
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL);
    
    int n,i,s,sum=0;
    cin>>n;
    
    int arr[n];
    
    for(i=0;i<n;i++){cin>>arr[i]; sum+=arr[i];}
    
    int target_sum;
    cin>>target_sum;
    
    
    for(i=0;i<=n;i++)
    {
        for(s=0;s<=sum;s++)
        {
            if(i==0)
            {
                if(s==0){dp[i][s]=true;}
                else{dp[i][s]=false;}
                continue;
            }
            
            bool v1=false,v2=false;
            
            if(s>=arr[i-1]){v1=dp[i-1][s-arr[i-1]];}
            
            v2 = dp[i-1][s];
            
            
            dp[i][s] = v1||v2;
        }
    }
    
    
    if(!dp[n][target_sum]){cout<<"Not Possible\n";}
    else
    {
        vector<int> ss;
        find_subsets(arr,n,target_sum,ss);
    }
    
    return 0;
}
