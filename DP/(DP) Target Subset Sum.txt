class Solution {
public:
    int findTargetSumWays(vector<int>& arr, int target) 
    {
        int n = arr.size();
        int i,s;
        int sum = 0;
        
        for(i=0;i<n;i++){sum+=arr[i];}
        
        int dp[n+1][sum+1];
        memset(dp,0,sizeof(dp));
        
        //dp[i][s] = no.of subsets with sum 's' using first 'i' elements
        
        for(i=0;i<=n;i++)
        {
           for(s=0;s<=sum;s++)
           {
               if(i==0)
               {
                   if(s==0){dp[i][s]=1;}
                   else{dp[i][s]=0;}
                   continue;
               }
               int v1=0,v2=0;
                
                if(s>=arr[i-1]){v1 = dp[i-1][s-arr[i-1]];} //include ith element
                v2 = dp[i-1][s];//dont include ith element
            
                dp[i][s] = v1+v2;
               
            }
       }
        
        
        if(((sum+target)%2)!=0){return 0;}
        else if (((sum+target)/2)>(sum) || (sum+target)<0){return 0;}
        
        return dp[n][(sum+target)/2];
        
    }
};