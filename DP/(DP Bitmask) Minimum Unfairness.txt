https://leetcode.com/problems/fair-distribution-of-cookies/
class Solution {
public:
    int find(int mask, vector<vector<int>>&dp, vector<int>&maskSum, int k)
    {
        if(mask<=0 || mask>=300 || k<=0){return 0;}
        if(dp[mask][k] != INT_MAX){return dp[mask][k];}

        if(k==1) {
            dp[mask][k] = maskSum[mask];
            return dp[mask][k];
        }

        for(int submask=mask;submask;submask=(submask - 1)&mask) {
            dp[mask][k] = min(
                dp[mask][k], 
                max(
                    maskSum[submask],
                    find(mask^submask, dp, maskSum, k-1)
                )
            );
        }

        return dp[mask][k];
    }

    int distributeCookies(vector<int>& cookies, int k) 
    {
        int n = cookies.size();

        vector<int>maskSum((1ll << n) + 2);
        for(int mask = 0;mask<(1ll << n); mask++){
            int total = 0;
            for(int i = 0;i<n;i++){
                if(mask & (1ll << i)){
                    total += cookies[i];
                }
            }
            maskSum[mask] = total;
        }

        vector<vector<int>> dp(300, vector<int>(k+2, INT_MAX));

        return find((1ll<<n) - 1, dp, maskSum, k);
    }
};