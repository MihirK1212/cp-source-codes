bool satisfies(int i,int j,int m,int n)
{
    return i>=0 && j>=0 && i<m && j<n;
}
int findMax(vector<vector<int>>&A,int i,int j,int m,int n)
{
    int mval = A[i][j];

    if(satisfies(i-1,j,m,n)){mval=max(mval,A[i-1][j]);}
    if(satisfies(i,j+1,m,n)){mval=max(mval,A[i][j+1]);}
    if(satisfies(i+1,j,m,n)){mval=max(mval,A[i+1][j]);}
    if(satisfies(i,j-1,m,n)){mval=max(mval,A[i][j-1]);}

    return mval;
}
vector<vector<int> > Solution::solve(int K, vector<vector<int> > &A) 
{
    int m = A.size();
    int n = A[0].size();

    vector<vector<int>> curr = A;
    vector<vector<int>> next = A;

    for(int k=1;k<=K;k++)
    {
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                next[i][j] = findMax(curr,i,j,m,n);
            }
        }

        curr = next;
    }

    return curr;
}
