// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution{

  public:
	int minDifference(int a[], int n)  { 
	    int i,s;
	    int sum=0;
	    for(i=0;i<n;i++){sum+=a[i];}
	    
	    bool dp[n+1][sum+1];
        
        memset(dp,false,sizeof(dp));
        
        //dp[i][s] = number of subsets with sum 's' using first 'i' elements
        
        for(i=0;i<=n;i++)
        {
            for(s=0;s<=sum;s++)
            {
		if(i==0)
               {
                   if(s==0){dp[i][s]=1;}
                   else{dp[i][s]=0;}
                   continue;
               }
                bool v1=false,v2=false;
                
                if(s>=a[i-1]){v1 = dp[i-1][s-a[i-1]];} //include ith element
                v2 = dp[i-1][s];//dont include ith element
            
                dp[i][s] = v1||v2;
            }
        }
        
        int min_diff = 1e8;
        
        for(s=0;s<=sum;s++)
        {
            if(dp[n][s]){min_diff=min(min_diff,abs(sum-2*s));}
        }
        
        return min_diff;
	} 
};


// { Driver Code Starts.
int main() 
{
   
   
   	int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;

        int a[n];
        for(int i = 0; i < n; i++)
        	cin >> a[i];

       

	    Solution ob;
	    cout << ob.minDifference(a, n) << "\n";
	     
    }
    return 0;
}  // } Driver Code Ends