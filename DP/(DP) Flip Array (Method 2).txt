int min_required(const vector<int>&weight,int W,int n)
{
    //use least number of elements possible to try to fill the bag of capacity W as
    //much as possilbe
    
    int dp[W+1][n+1];

    for(int w=0;w<=W;w++)
    {
        for(int i=0;i<=n;i++)
        {
            if(w==0 || i==0)
            {
                if(w==0){dp[w][i] = 0;}
                else{dp[w][i] = 1e7;}
                continue;
            }
            
            int v1=1e7 , v2=1e7;

            if(w>=weight[i-1]){v1=dp[w-weight[i-1]][i-1]+1;}
            v2=dp[w][i-1];

            dp[w][i] = min(v1,v2);
        }
    }
    
    for(int w=W;w>=0;w--)
    {
        if(dp[w][n]!=1e7){return dp[w][n];}
    }

    return 0;
}
int Solution::solve(const vector<int> &A) 
{
    int n = A.size();

    int sum = 0;
    for(auto x : A){sum+=x;}
    
    return min_required(A,sum/2,n);
}
