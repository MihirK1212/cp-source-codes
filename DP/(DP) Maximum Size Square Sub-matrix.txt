//https://www.interviewbit.com/problems/maximum-size-square-sub-matrix/
int Solution::solve(vector<vector<int> > &A) 
{
    int m = A.size();
    int n = A[0].size();
    
    int dp[m][n];
    memset(dp, -1, sizeof dp);
    
    //size = length of side
    //dp[i][j] = maximum size square with bottom right corner as (i,j)
    //we take minimum because we want to find the weakest link
    //weakest link restricts the maximum size of the square

    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(i==0 || j==0){dp[i][j]=A[i][j]; continue;}
            if(A[i][j]==0){dp[i][j]=0; continue;}

            dp[i][j] = min(dp[i-1][j-1],min(dp[i][j-1],dp[i-1][j])) + 1; 
        }
    }

    int maxi=0;
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            maxi = max(maxi,dp[i][j]);
        }
    }

    return maxi*maxi;
}