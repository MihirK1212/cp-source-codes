/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Compare{
    public:
    bool operator()(pair<int,ListNode*>&x,pair<int,ListNode*>&y)
    {
        return x.first>y.first;
    }
};
ListNode* Solution::mergeKLists(vector<ListNode*> &A) 
{
    priority_queue<pair<int,ListNode*>,vector<pair<int,ListNode*>>,Compare> min_h;


    for(auto h : A)
    {
        if(!h){continue;}
        min_h.push({h->val,h});
    }

    ListNode* head = NULL;
    ListNode* curr = NULL;

    while(!min_h.empty())
    {
        auto p = min_h.top(); min_h.pop();
        
        int val = p.first;
        ListNode* address = p.second;
        ListNode* nextAddress = address->next;

        if(!head)
        {
            head = address;
            curr = head;
        }
        else
        {
            curr->next = address;
            curr = curr->next;
            curr->next = NULL;
        }

        if(nextAddress)
        {
            min_h.push({nextAddress->val,nextAddress});
        }
    }

    return head;
}
