class Node { 
    public:
    int key; 
    int value; 
    Node *pre; 
    Node *next; 

    
    Node(int k, int v) 
    { 
        key = k; 
        value = v;
        pre=NULL;next=NULL;
    } 
}; 

unordered_map<int, Node*> hash_map; 
int capacity, count_x; 
Node *head, *tail; 

LRUCache::LRUCache(int c) 
{
    hash_map.clear();
    capacity = c; 
    count_x = 0; 
    head = new Node(0, 0); 
    tail = new Node(0, 0); 
    head->next = tail; 
    tail->pre = head; 
    head->pre = NULL; 
    tail->next = NULL; 
}

void deleteNode(Node *node) 
{ 
    node->pre->next = node->next; 
    node->next->pre = node->pre; 
} 

void addToHead(Node *node) 
{ 
    node->next = head->next; 
    node->next->pre = node; 
    node->pre = head; 
    head->next = node; 
} 

int LRUCache::get(int key) 
{
    if (hash_map[key] != NULL) { 
        Node *node = hash_map[key]; 
        int result = node->value; 
        deleteNode(node); 
        addToHead(node); 
        return result; 
    } 
    return -1; 
}

void LRUCache::set(int key, int value) 
{
    if (hash_map[key] != NULL) 
    { 
        Node *node = hash_map[key]; 
        node->value = value; 
        deleteNode(node); 
        addToHead(node); 
    } 
    else { 
        Node *node = new Node(key, value); 
        hash_map[key]= node; 
        if (count_x < capacity) { 
            count_x++; 
            addToHead(node); 
        } 
        else { 
            hash_map.erase(tail->pre->key); 
            deleteNode(tail->pre); 
            addToHead(node); 
        } 
    } 
}