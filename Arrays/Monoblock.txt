#include <bits/stdc++.h>
using namespace std;

// https://codeforces.com/contest/1715/problem/C

#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define sort(a) sort(a.begin(),a.end());
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}
#define cy cout<<"YES\n";
#define cn cout<<"NO\n";
#define cig cin.ignore();
typedef long long ll;
typedef long double  ld;
typedef vector<long long> vll;
typedef vector<int> vi;
typedef vector<pair<ll,ll>> vpll;
typedef vector<pair<int,int>> vpii;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<int,pair<int,int>> ppi;

ll inf=std::numeric_limits<long long>::max();

/*
    Joint is index i such that a[i]!=a[i-1]   (1<=i<n)
    
    for a subarray (l..r) , if the number of joints in the range ((l+1)...r)
    is x, then awesomeness of subarray is x+1
    
    hence sum of awesomeness can be calculated as follows:
    
    1) For each index 1<=i<n, if it is a joint, then
       count number of subarrays (l...r) that will have this joint in the range ((l+1)...r)
       this can be done by taking (1,2,... or i) elements on the left of the joint
                    and by taking (0,1,.....(n-i-1)) elements on the right side of the joint
        
        hence total number of subarrays = i*(n-i)
        
    2) now if we take the sum for each index, we will get sum(x) for all the subarrays
        (x is defined at the start of this explanation)
        
    3) hence answer = sum(x) + (number of subarrays)
           
        
    for updating index ind,
    reset ind-1,ind,ind+1
    set a[ind]=x
    update ind-1,ind,ind+1
*/

void setIO(string name = "") 
{ 
    ios_base::sync_with_stdio(0); cin.tie(0); 
    
    if(name!="")
    {
        freopen((name+".in").c_str(), "r", stdin);
	    freopen((name+".out").c_str(), "w", stdout);
    }
}

void subtract(vector<bool>&isJoint,ll ind,ll&count,ll n)
{
    if(ind<0 || ind>=n){return;}
    
    if(isJoint[ind])
    {
        count-=(ind*(n-ind));
    }
    
    isJoint[ind] = false;
}

void add(vll&a,vector<bool>&isJoint,ll ind,ll&count,ll n)
{
    if(ind<0 || ind>=n){return;}
    
    
    if(ind>0 && a[ind]!=a[ind-1])
    {
        isJoint[ind] = true;
        count+=(ind)*(n-ind);
    }
}

int main()
{
    setIO("");
    
    ll n,m,i;
    cin>>n>>m;
    
    vll a(n);
    input(a);
    
    vector<bool> isJoint(n,false);
    
    ll tot = (n*(n+1))/2;
    ll count = 0;
    
    for(i=1;i<n;i++)
    {
        if(a[i]!=a[i-1])
        {
            isJoint[i] = true;
            count+=(i)*(n-i);
        }
    }
    
    while(m--)
    {
        ll ind,x;
        cin>>ind>>x;
        ind--;
        
        
        subtract(isJoint,ind-1,count,n);
        subtract(isJoint,ind,count,n);
        subtract(isJoint,ind+1,count,n);
        
        
        a[ind] = x;
        
        add(a,isJoint,ind-1,count,n);
        add(a,isJoint,ind,count,n);
        add(a,isJoint,ind+1,count,n);
        
        cout<<count + tot<<"\n";
    }
    
    return 0;
}
