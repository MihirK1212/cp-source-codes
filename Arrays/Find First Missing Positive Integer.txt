// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends


class Solution
{
    public:
    //Function to find the smallest positive number missing from the array.
    int segregate(int *a,int n)
    {
        int i,j = 0;
        for(i=0;i<n;i++)
        {
            if(a[i]<=0)
            {
                swap(a[i],a[j]);
                j++;
            }
        }
        return j;
    }
    int findMissing(int *a,int n)
    {
        int i;
        for(i=0;i<n;i++)
        {
            if((abs(a[i])-1)<n && (abs(a[i])-1)>=0 && a[abs(a[i])-1]>0)
            {
                a[abs(a[i])-1]=-a[abs(a[i])-1];
            }
        }
        
        for(i=0;i<n;i++)
        {
            if(a[i]>=0){return (i+1);}
        }
        
        return n+1;
    }
    int missingNumber(int a[], int n) 
    { 
        int i;
        int firstInd = segregate(a,n);
        
        return findMissing (a+firstInd,n-firstInd);
    } 
};

// { Driver Code Starts.

int missingNumber(int arr[], int n);

int main() { 
    
    //taking testcases
    int t;
    cin>>t;
    while(t--){
        
        //input number n
        int n;
        cin>>n;
        int arr[n];
        
        //adding elements to the array
        for(int i=0; i<n; i++)cin>>arr[i];
        
        Solution ob;
        //calling missingNumber()
        cout<<ob.missingNumber(arr, n)<<endl;
    }
    return 0; 
}   // } Driver Code Ends