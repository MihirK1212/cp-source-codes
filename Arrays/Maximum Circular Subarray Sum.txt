// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution{
    public:
    // arr: input array
    // num: size of array
    //Function to find maximum circular subarray sum.
    int circularSubarraySum(int arr[], int n){
        
        int sum = arr[0];
        int currMax=arr[0],maxSum=arr[0];
        int currMin=arr[0],minSum=arr[0];
        
        bool allNegative = true;
        if(arr[0]>=0){allNegative=false;}
        
        for(int i=1;i<n;i++)
        {
            if(arr[i]>=0){allNegative=false;}
            sum+=arr[i];
            
            currMax = max(currMax+arr[i],arr[i]);
            maxSum = max(maxSum,currMax);
            
            currMin = min(currMin+arr[i],arr[i]);
            minSum = min(minSum,currMin);
        }
        
        if(allNegative)
        {
            return maxSum;
        }
        
        return max(maxSum,sum-minSum);
    }
};

// { Driver Code Starts.

int main()
 {
	int T;
	
	//testcases
	cin>> T;
	
	while (T--)
	{
	    int num;
	    
	    //size of array
	    cin>>num;
	    int arr[num];
	    
	    //inserting elements
	    for(int i = 0; i<num; i++)
	        cin>>arr[i];
	        
	    Solution ob;
	    //calling function
	    cout << ob.circularSubarraySum(arr, num) << endl;
	    
	}
	
	return 0;
}  // } Driver Code Ends