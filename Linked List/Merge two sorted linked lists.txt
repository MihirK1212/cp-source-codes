/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* findHead(ListNode* A, ListNode* B) 
{
    int va = A ? (A->val):INT_MAX;
    int vb = B ? (B->val):INT_MAX;
    
    if(va<=vb){return A;}
    return B;
}
ListNode* Solution::mergeTwoLists(ListNode* A, ListNode* B) 
{
    ListNode *prevA = NULL;
    ListNode *currA = A , *currB = B;
    
    ListNode* head = findHead(A,B);
    
    while(currA && currB)
    {
        int va = currA->val , vb = currB->val;
        
        if(va<=vb)
        {
            prevA = currA;
            currA = currA->next;
        }
        else
        {
            ListNode* nextB = currB -> next;
            
            if(prevA){prevA->next = currB;}
            currB->next = currA;
            prevA = currB;
            
            currB = nextB;
        }
    }
    
    if(currB)
    {
        prevA->next = currB;
    }
    
    return head;    
}
