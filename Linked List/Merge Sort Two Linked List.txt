// { Driver Code Starts
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};


 // } Driver Code Ends
/* Structure of the linked list node is as
struct Node 
{
    int data;
    struct Node* next;
    Node(int x) { data = x;  next = NULL; }
};
*/


class Solution{
  public:
    //Function to sort the given linked list using Merge Sort.
    Node* findMid(Node* head,Node* end)
    {
        if(!head){return NULL;}
        
        Node *p1=head, *p2=head,*prev=NULL;
        
        while(p1 && p2 && p2->next && 
                p1!=(end->next) && p2!=(end->next) && (p2->next)!=(end->next))
        {
            prev = p1;
            p1=p1->next;
            p2=p2->next->next;
        }
        
        if(p1->next == NULL){return prev;}
        return p1;
    }
    Node* merge(Node* A,Node* B)
    {
        if(!A){return B;}
        if(!B){return A;}
    
        Node *prev=NULL;
        Node *a1=A,*a2=B;
        
        while(a1 && a2)
        {
            int v1=a1->data , v2=a2->data;
    
            if(v1<=v2)
            {
                prev = a1;
                a1=a1->next;
            }
            else if(prev)
            {
                prev->next = a2;
                Node* nextAdd = a2->next;
                a2->next = a1;
                prev = a2;
                a2 = nextAdd;
            }
            else
            {
                Node* nextAdd = a2->next;
                a2->next = a1;
                prev = a2;
                a2 = nextAdd;
            }
        }
    
        if(!a1 && a2){prev->next = a2;}
        
    
        if((A->data) <= (B->data)){return A;}
        return B;
    }
    Node* solve(Node* head,Node* end)
    {
        if(head==NULL || end==NULL){return head;}
        if(head==end){return head;}
        
        Node* mid = findMid(head,end);
        
        if(mid==NULL){return NULL;}
        
        Node* temp = mid->next;
        mid->next = NULL;
        
        Node* h1 = solve(head,mid);
        Node* h2 = solve(temp,end);
        
        return merge(h1,h2);
        
    }
    Node* mergeSort(Node* head) 
    {
        if(!head){return NULL;}
        
        Node* end=head;
        while(end->next){end=end->next;}
        
        return solve(head,end);
        
    }
};


// { Driver Code Starts.

void printList(Node* node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

void push(struct Node** head_ref, int new_data) {
    Node* new_node = new Node(new_data);

    new_node->next = (*head_ref);
    (*head_ref) = new_node;
}

int main() {
    long test;
    cin >> test;
    while (test--) {
        struct Node* a = NULL;
        long n, tmp;
        cin >> n;
        for (int i = 0; i < n; i++) {
            cin >> tmp;
            push(&a, tmp);
        }
        Solution obj;
        a = obj.mergeSort(a);
        printList(a);
    }
    return 0;
}  // } Driver Code Ends