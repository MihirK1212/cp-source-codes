#include <bits/stdc++.h>
using namespace std;

#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";}c cout<<"\n";
#define all(x) (x).begin(), (x).end()
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}
#define cy cout<<"YES\n";
#define cn cout<<"NO\n";
#define cig cin.ignore();
typedef long long ll;
typedef long double  ld;
typedef vector<long long> vll;
typedef vector<int> vi;
typedef vector<pair<ll,ll>> vpll;
typedef vector<pair<int,int>> vpii;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<int,pair<int,int>> ppi;

ll inf=std::numeric_limits<long long>::max();

ll ceilVal(ll a,ll b)
{
   return ceil(((ld)a)/((ld)b)); 
}

void setIO(string name = "") 
{ 
    ios_base::sync_with_stdio(0); cin.tie(0); 
    
    if(name!="")
    {
        freopen((name+".in").c_str(), "r", stdin);
	    freopen((name+".out").c_str(), "w", stdout);
    }
}

bool allowed(vector<vll>&graph,ll u,vll&color,ll c)
{
    for(auto v : graph[u])
    {
        if(color[v]==c){return false;}
    }
    
    return true;
}

bool dfs(vector<vll>&graph,ll u,vll&color,ll k)
{
    if(u>=graph.size()){return true;}
    
    for(ll c=1;c<=k;c++)
    {
        if(allowed(graph,u,color,c))
        {
            color[u] = c;
            if(dfs(graph,u+1,color,k))
            {
                return true;
            }
            color[u] = -1;
        }
    }
    
    return false;
}


void solve()
{
    ll n,m,i;
    cin>>n>>m;
    
    vector<vll> graph(n+1);
    
    while(m--)
    {
        ll u,v;
        cin>>u>>v;
        
        graph[u].pb(v);
        graph[v].pb(u);
    }
    
    vll color(n+1,-1);
    ll k = 4; //k-coloring
    
    dfs(graph,1,color,k);
    
    for(ll u=1;u<=n;u++){cout<<color[u];} cout<<"\n";
}

//http://www.usaco.org/index.php?page=viewproblem2&cpid=916

int main()
{
    setIO("revegetate");
    // setIO("");
    
    ll T = 1;
    
    while(T--)
    {
        solve();
    }
    
    return 0;
}
