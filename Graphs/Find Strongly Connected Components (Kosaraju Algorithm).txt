#include <bits/stdc++.h>
using namespace std;

#define ll long long 
#define ld long double 
#define vll vector<long long>
#define vi vector<int>
#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define sort(a) sort(a.begin(),a.end());
#define rsort(a) sort(a.rbegin(),a.rend());
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}
typedef vector<pair<ll,ll>> vpll;
typedef vector<pair<int,int>> vpii;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<int,pair<int,int>> ppi;

ll inf=std::numeric_limits<long long>::max();

ll mod = 1000000007;

void setIO(string name = "") 
{ 
    ios_base::sync_with_stdio(0); cin.tie(0); 
    
    if(name!="")
    {
        freopen((name+".in").c_str(), "r", stdin);
	    freopen((name+".out").c_str(), "w", stdout);
    }
}

void dfs(vector<vll>&graph,ll u,vector<bool>&visited,vll &component)
{
    visited[u] = true;
    component.pb(u);
    for(auto v : graph[u])
    {
        if(!visited[v]){dfs(graph,v,visited,component);}
    }
}

void fillOrder(vector<vll>&graph,ll u,vector<bool>&visited,stack<ll>&stck)
{
    visited[u] = true;
    for(auto v : graph[u])
    {
        if(!visited[v]){fillOrder(graph,v,visited,stck);}
    }
    
    stck.push(u);
}

int main()
{
    setIO("");
    
    
    ll n,i;
    cin>>n;
   
    vector<vll> graph(n+1) , revGraph(n+1);
    
    ll m;
    cin>>m;
    for(i=1;i<=m;i++){ll u,v; cin>>u>>v; graph[u].pb(v); revGraph[v].pb(u);}
    
    stack<ll> stck;
    
    vector<bool> visited(n+1);
    
    for(i=1;i<=n;i++){visited[i]=false;}
    
    for(i=1;i<=n;i++)
    {
        if(!visited[i])
        {
            fillOrder(graph,i,visited,stck);
        }
    }
    
    for(i=1;i<=n;i++){visited[i]=false;}
    
    while(!stck.empty())
    {
        ll v = stck.top(); stck.pop();
        
        if(!visited[v])
        {
            vll component;
            dfs(revGraph,v,visited,component);
            printoneline(component);
        }
    }
  
    return 0;
}
