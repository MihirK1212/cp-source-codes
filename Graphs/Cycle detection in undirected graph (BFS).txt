// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool find(int V, vector<int> adj[],int source,vector<bool>&visited)
    {
        queue<int> q;
        vector<int> parent(V,-1);
        
        q.push(source);
        
        while(!q.empty())
        {
           int u = q.front(); q.pop();
           
           if(!visited[u])
           {
               visited[u] = true;
               
               for(auto v : adj[u])
               {
                   if(!visited[v]){q.push(v); parent[v] = u;}
                   else if(v!=parent[u]){return true;}
               }
           }
        }
       
        return false;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
       
       vector<bool> visited(V,false);
       
       for(int i=0;i<V;i++)
       {
           if(!visited[i] && find(V,adj,i,visited))
           {
               return true;
           }
       }
       
       return false;
    }
};

// { Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}  // } Driver Code Ends