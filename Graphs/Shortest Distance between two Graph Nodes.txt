#include <bits/stdc++.h>
using namespace std;

#define ll long long 
#define vll vector<long long>
#define f first
#define s second
#define pb push_back
#define printoneline(arr,a,b) for(long long i=a;i<=b;i++){cout<<arr[i]<<" ";} cout<<"\n";
#define sort(a) sort(a.begin(),a.end());
#define rsort(a) sort(a.rbegin(),a.rend());
#define reverse(a) reverse(a.begin(),a.end());

/*
To find the distance, we maintain two parallel queues, one that holds the node numbers and a parallel one that holds
the distance from curr_node at the time of insertion into the first queue
*/


void bfs(map<ll,vll> &graph,ll start,ll end)
{
    vector<bool> visited(graph.size(),false);
    queue<ll> q;
    
    vll dist(graph.size(),-1);
    dist[start]=0;
    
    q.push(start);
    
    while(!q.empty())
    {
        ll u=q.front();
        q.pop();
        if(!visited[u])
        {
            visited[u]=true;
            for(auto x:graph[u])
            {
                if(!visited[x])
                {
                    q.push(x);
                    if(dist[x]==-1){dist[x]=dist[u]+1;}
                }
            }
        }
    }
    
    cout<<"Shortest distance between "<<start<<" and "<<end<<" is "<<dist[end]<<"\n";
    
    return;
}


int main()
{
    map<ll,vll> graph;
    
    
    graph[0]={1,4,5};
    graph[1]={0,2,3,4};
    graph[2]={1};
    graph[3]={1,4};
    graph[4]={0,1,3};
    graph[5]={0,6,9};
    graph[6]={5,9};
    graph[7]={8};
    graph[8]={7};
    graph[9]={5,6};
    
    ll start,end;
    
    cout<<"BFS...\n";
    cout<<"Enter starting node\n";
    cin>>start;
    cout<<"Enter ending node\n";
    cin>>end;
    
    bfs(graph,start,end);
    
    return 0;
}
