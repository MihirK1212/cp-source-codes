// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {   
        int source = 0;
        
        set<pair<int,int>> pQ;
        vector<int> key(V,INT_MAX);
        vector<bool> inMST(V,false);
        vector<int> parent(V,-1);
        
        int totalWeight=0;
        
        key[source] = 0;
        
        for(int u=0;u<V;u++)
        {
            pQ.insert({key[u],u});
        }
        
        
        while(!pQ.empty())
        {
            auto p = *(pQ.begin()); pQ.erase(p);
            int u = p.second;
            
            totalWeight+=key[u];
            
            inMST[u] = true;
           
            for(auto edge : adj[u])
            {
               int v = edge[0] , weight_u_v = edge[1];
            
                if(inMST[v]){continue;}
                
                
                if(weight_u_v<key[v])
                {
                    pQ.erase({key[v],v});
                    key[v] = weight_u_v;
                    pQ.insert({key[v],v});
                    parent[v] = u;
                }
            }
        }
        
        return totalWeight;
    }
};

// { Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}

  // } Driver Code Ends