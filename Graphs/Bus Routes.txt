// https://leetcode.com/problems/bus-routes/
class Solution {
public:
    int numBusesToDestination(vector<vector<int>>& routes, int source, int target) 
    {
        if(source == target) {
            return 0;
        }
        
        int numRoutes = routes.size();
        map<int, vector<int>> routesWithStop;
        
        for(int r=0; r<numRoutes; r++) {
            for(auto stop : routes[r]) {
                routesWithStop[stop].push_back(r);
            }
        }
        
        queue<int> q;
        q.push(source);
        
        int level = 0;
        /*
        Go level by level
        level 0 -> routes containing source
        level 1 -> routes containing nodes that are in the routes containing source
        and so on
        for each level, we need to take one train
        hence annwer is level + 1
        */
        
        vector<bool> visited(numRoutes, false);
        
        while(!q.empty()) {
            int sz = q.size();
            while(sz--) {
                int u = q.front(); q.pop();
                for(auto r : routesWithStop[u]) {
                    if(!visited[r]) {
                        visited[r] = true;
                        for(auto v : routes[r]) {
                            if(v==target){return level+1;}
                            q.push(v);
                        }
                    }
                }
            }
            level++; //one level increased
        }
        
        return -1;
    }
};