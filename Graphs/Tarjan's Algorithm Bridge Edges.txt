#include <bits/stdc++.h>
using namespace std;

#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define all(x) (x).begin(), (x).end()
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}
#define cy cout<<"YES\n";
#define cn cout<<"NO\n";
#define cig cin.ignore();
typedef long long ll;
typedef long double  ld;
typedef vector<long long> vll;
typedef vector<int> vi;
typedef vector<pair<ll,ll>> vpll;
typedef vector<pair<int,int>> vpii;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<int,pair<int,int>> ppi;

ll inf=std::numeric_limits<long long>::max();

ll ceilVal(ll a,ll b)
{
   return ceil(((ld)a)/((ld)b)); 
}

void setIO(string name = "") 
{ 
    ios_base::sync_with_stdio(0); cin.tie(0); 
    
    if(name!="")
    {
        freopen((name+".in").c_str(), "r", stdin);
	    freopen((name+".out").c_str(), "w", stdout);
    }
}

bool dfs(vector<vll>&graph, ll u, vector<bool>&visited , ll parent , vll&discTime , vll&minChildTime , ll&t)
{
    visited[u] = true;
    discTime[u] = minChildTime[u] = t;
    t++;
    
    for(auto v : graph[u])
    {
        if(!visited[v])
        {
            if(dfs(graph,v,visited,u,discTime,minChildTime,t)){return true;}
            
            minChildTime[u] = min(minChildTime[u],minChildTime[v]);
            if(minChildTime[v]>discTime[u]){return true; } // u - v is a bridge edge}
        }
        else if(v!=parent)
        {
            minChildTime[u] = min(minChildTime[u],discTime[v]);
        }
    }
    
    return false;
}

ll solve()
{
    ll n,m,i;
    cin>>n>>m;
    
    if(n==0 && m==0){return -1;}
    
    vector<vll> graph(n);
    
    while(m--)
    {
        ll u,v;
        cin>>u>>v;
        
        graph[u].pb(v);
        graph[v].pb(u);
    }
    
    vector<bool> visited(n,false);
    vll discTime(n,inf) , minChildTime(n,inf);
    
    ll parent = -1;
    ll t = 1;
    
    for(ll u=0;u<n;u++)
    {
        if(!visited[u])
        {
            if(dfs(graph , u , visited , parent , discTime , minChildTime , t))
            {
                return 1;
            }
        }
    }
    
    return 0;
}

int main()
{
    setIO("");
    
    
    while(true)
    {
        ll res = solve();
        
        if(res==-1){break;}
        
        if(res)
        {
            cout<<"Yes\n";
        }
        else
        {
            cout<<"No\n";
        }
    }
    
    return 0;
}
