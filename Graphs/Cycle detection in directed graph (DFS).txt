// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in a directed graph.
    
    bool check(vector<int> adj[],int u,vector<bool>&visited,vector<bool>&inStack)
    {
        visited[u] = true;
        inStack[u] = true;
        
        for(auto v : adj[u])
        {
            if(!visited[v] && check(adj,v,visited,inStack)){return true;}
            else if(inStack[v]){return true;}
        }
        
        inStack[u] = false;
        return false;
    }
    bool isCyclic(int V, vector<int> adj[]) {
        vector<bool> visited(V,false);
        vector<bool> inStack(V,false);
        
        for(int i=0;i<V;i++)
        {
            if(!visited[i] && check(adj,i,visited,inStack))
            {
                return true;
            }
        }
        
        return false;
    }
};

// { Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}
  // } Driver Code Ends