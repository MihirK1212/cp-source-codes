// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool check(vector<int> adj[],int u,int parent,vector<bool>&visited,vector<bool>&inStack)
    {
        visited[u] = true;
        inStack[u] = true;
        
        for(auto v : adj[u])
        {
            if(!visited[v] && check(adj,v,u,visited,inStack)){return true;}
            else if(v!=parent && inStack[v]){return true;}
        }
        
        inStack[u] = false;
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
       
       vector<bool> visited(V,false);
        vector<bool> inStack(V,false);
        
        for(int i=0;i<V;i++)
        {
            if(!visited[i] && check(adj,i,-1,visited,inStack))
            {
                return true;
            }
        }
        
        return false;
    }
};

// { Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}  // } Driver Code Ends