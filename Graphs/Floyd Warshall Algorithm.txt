#include <bits/stdc++.h>
using namespace std;

void findShortestDistPairs(vector<vector<int>>&dist,vector<vector<int>>&parent)
{
    int i,j,k;
    int V = dist.size();
    
    for(k=0;k<V;k++)
    {
        for(int i=0;i<V;i++)
        {
            for(int j=0;j<V;j++)
            {
                if((dist[i][k]+dist[k][j])<dist[i][j] && dist[i][k]!=INT_MAX && dist[k][j]!=INT_MAX)
                {
                    dist[i][j] = (dist[i][k]+dist[k][j]);
                    parent[i][j] = parent[k][j];
                }
            }
        }
    }
}

void query(int u,int v,vector<vector<int>>&dist,vector<vector<int>>&parent)
{
    if(dist[u][v]==INT_MAX){cout<<"Path not possible between "<<u<<" and "<<v<<"\n"; return;}
    
    cout<<"Shortest Path Distance from "<<u<<" to "<<v<<" : "<<dist[u][v]<<"\n";
    
    cout<<"Shortest Path : ";
    
    int curr = v;
    vector<int> path;
    
    while(curr!=-1)
    {
        path.push_back(curr);
        curr = parent[u][curr];
    }
    
    reverse(path.begin(),path.end());
    for(auto x : path){cout<<x<<" ";}
    cout<<"\n";
}

void printMatrix(vector<vector<int>>&m)
{
    for(int i=0;i<m.size();i++)
    {
        for(int j=0;j<m.size();j++)
        {
            cout<<m[i][j]<<" ";
        }
        cout<<"\n";
    }
    cout<<"\n";
}

int main()
{
    int V,E;
    cin>>V>>E;
    
    vector<vector<int>> dist(V,vector<int>(V,INT_MAX));
    vector<vector<int>> parent(V,vector<int>(V,-1));
    
    while(E--)
    {
        int u,v,w;
        cin>>u>>v>>w;
        dist[u][v] = w;
        parent[u][v] = u;
    }
    
    for(int i=0;i<V;i++){dist[i][i]=0;}
    
    findShortestDistPairs(dist,parent);
    
    printMatrix(dist);
    printMatrix(parent);
    
    for(int i=0;i<V;i++)
    {
        for(int j=0;j<V;j++)
        {
            query(i,j,dist,parent);
        }
        cout<<"\n";
    }

    return 0;
}

/*
Example1
4 4
0 1 5
0 3 10
1 2 3
2 3 1

Example2
5 9
0 1 3
0 2 8
0 4 -4
1 3 1
1 4 7
2 1 4
2 3 -5
3 0 2
4 3 6

Example 3
5 9
0 1 3
0 2 8
0 4 -4
1 3 1
1 4 7
2 1 4
3 0 2
3 2 -5
4 3 6
*/
