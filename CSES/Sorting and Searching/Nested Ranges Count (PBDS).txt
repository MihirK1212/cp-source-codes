#include<iostream>
#include<vector>
#include<string>
#include<map>
#include<cmath>
#include<set>
#include<queue>
#include<algorithm>
#include <limits>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
 
using namespace __gnu_pbds;
using namespace std;
 
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
typedef long long ll;
typedef vector<long long> vll;
 
// Ordered multiset using indexed pairs
template <typename T>
using ordered_multiset = tree<pair<T, int>, null_type, less<pair<T, int>>, rb_tree_tag, tree_order_statistics_node_update>;
 
bool cmpDecStartIncEnd(vll&r1, vll&r2) {
	if(r1[0] == r2[0]){return r1[1] < r2[1];}
	return r1[0] > r2[0];
}
 
void helperCountContains(vector<vll> ranges)
{
	int n = ranges.size();
	sort(ranges.begin(), ranges.end(), cmpDecStartIncEnd);
 
	vll ans(n);
 
	ordered_multiset<ll> rangeEnds;
	for(auto r : ranges) {
		ans[r[2]] = rangeEnds.order_of_key({r[1] + 1, -1});
		rangeEnds.insert({r[1], r[2]});
	}
	
	printoneline(ans);
}
 
bool cmpIncStartDecEnd(vll&r1, vll&r2) {
	if(r1[0] == r2[0]){return r1[1] > r2[1];}
	return r1[0] < r2[0];
}
 
void helperCountContainedIn(vector<vll> ranges) 
{
	int n = ranges.size();
	sort(ranges.begin(), ranges.end(), cmpIncStartDecEnd);
 
	vll ans(n);
 
	ordered_multiset<ll> rangeEnds;
	for(auto r : ranges) {
		ll setSize = rangeEnds.size(), countWithEndStrictlyLess = rangeEnds.order_of_key({r[1], -1});
		ans[r[2]] = setSize - countWithEndStrictlyLess;
		rangeEnds.insert({r[1], r[2]});
	}	
 
	printoneline(ans);
}
 
 
void solve() {
	ll n,i;
	cin>>n;
 
	vector<vll> ranges;
	for(i=1; i<=n; i++){ll a, b; cin>>a>>b; ranges.push_back({a,b,i-1});}
 
	helperCountContains(ranges);
	helperCountContainedIn(ranges);
}
 
int main() {
	solve();
	return 0;
