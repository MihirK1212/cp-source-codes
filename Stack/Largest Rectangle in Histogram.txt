void findLeft(vector<int>&A,vector<int>&leftLimit)
{
    int n = A.size();

    stack<int> s;

    for(int i=n-1;i>=0;i--)
    {
        while(!s.empty() && A[i]<A[s.top()])
        {
            leftLimit[s.top()] = i+1;
            s.pop();
        }

        s.push(i);
    }

    while(!s.empty()){leftLimit[s.top()]=0; s.pop();}
}
void findRight(vector<int>&A,vector<int>&rightLimit)
{
    int n = A.size();

    stack<int> s;

    for(int i=0;i<n;i++)
    {
        while(!s.empty() && A[i]<A[s.top()])
        {
            rightLimit[s.top()] = i-1;
            s.pop();
        }

        s.push(i);
    }

    while(!s.empty()){rightLimit[s.top()]=n-1; s.pop();}
}

int Solution::largestRectangleArea(vector<int> &A) 
{
    int n = A.size();

    vector<int> leftLimit(n,0);
    vector<int> rightLimit(n,0);

    for(int i=0;i<n;i++){leftLimit[i]=rightLimit[i]=i;}

    findLeft(A,leftLimit);
    findRight(A,rightLimit);

    int ans = 0;

    for(int i=0;i<n;i++)
    {
        ans = max(ans,(rightLimit[i]-leftLimit[i]+1)*A[i]);
    }

    return ans;
}
