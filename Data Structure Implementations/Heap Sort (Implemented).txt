// The functions should be written in a way that array become sorted
// in increasing order when heapSort() is called.

class Solution {
public:

	void heapify(vector<int>& arr, int n, int root) {
		int largest = root;
		int l = 2*root + 1;
		int r = 2*root + 2;

		if (l < n && arr[l] > arr[largest])
			largest = l;

		if (r < n && arr[r] > arr[largest])
			largest = r;

		if (largest != root) {
			swap(arr[root], arr[largest]);
			heapify(arr, n, largest);
		}
	}

	void buildHeap(vector<int>& arr, int n) {
		for (int i = n/2 - 1; i >= 0; i--)
			heapify(arr, n, i);
	}

	// Function to sort an array using Heap Sort.
	void heapSort(vector<int>& arr) {
		int n = arr.size();

		buildHeap(arr, n);  // build max-heap

		for (int i = n-1; i > 0; i--) {
			swap(arr[0], arr[i]);   // move max to end
			heapify(arr, i, 0);     // heapify reduced heap
		}
	}
};