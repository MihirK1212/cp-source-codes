// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long int inversions = 0;
    long long inf =std::numeric_limits<long long>::max();
    
    
    long long int merge(long long *arr, long long lb, long long ub,long long mid) 
    {
        long long int local_inv = 0;
        long long i,j,k;
        long long n1 = (mid-lb+1);
        long long n2 = (ub-mid);
    
        long long L[n1+1] , R[n2+1];
    
        L[n1]=inf;
        R[n2]=inf;
    
        for(i=0;i<n1;i++)
        {
            L[i] = arr[lb+i];
        }
        for(j=0;j<n2;j++)
        {
            R[j]= arr[mid+j+1];
        }
    
        i=0;
        j=0;
    
        for(k=lb;k<=ub;k++)
        {
            if(L[i]<=R[j])
            {
                arr[k]=L[i];
                i++;
            }
            else
            {
                arr[k]=R[j];
                long long l_pos = lb+i;
                local_inv+=(mid-l_pos+1);
                j++;
            }
        }
        return local_inv;
    }

    void mergesort(long long *arr,int low,int high)
    {
        long long mid;
        if(low>=high)
        {
            return;
        }
        
        mid=(low+high)/2;
            
        mergesort(arr,low,mid);
        mergesort(arr,mid+1,high);
        inversions+=merge(arr,low,high,mid);
    }
    long long int inversionCount(long long arr[], long long N)
    {
        mergesort(arr,0,N-1);
        // for(long long i=0;i<N;i++){cout<<arr[i]<<" ";}
        return inversions;
        // cout<<"\n";
    }

};

// { Driver Code Starts.

int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}
  // } Driver Code Ends