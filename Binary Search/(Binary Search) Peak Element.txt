class Solution {
public:
    int findPeakElement(vector<int>& arr) {
        int n = arr.size();
        int lb=0,ub=n-1,mid;
        
        if(n==1)
        {
            return 0;
        }
        
        while(lb<=ub)
        {
            mid = lb + (ub-lb)/2;
            
            //Check if mid is the peak element
            if(mid==0 && arr[mid]>arr[mid+1])
            {
                return mid;
            }
            if(mid==(n-1) && arr[mid]>arr[mid-1])
            {
                return mid;
            }
            if(mid>0 && mid<(n-1) && arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1])
            {
                return mid;
            }
            
            //If mid is not the peak, then it is either in the increaing part or the decreasing part
            //We want mid to go to the increaing part
            
            if((mid+1)<n && arr[mid+1]>=arr[mid]) //mid is in the increaing part
            {
                lb=mid+1; //move more into the increaing part
            }
            
            else if((mid-1)>=0 && arr[mid-1]>=arr[mid]) //mid is in the decreasing part
            {
                ub=mid-1; //move away from the decreasing part
            }
        }
        
        return 0;
    }
};