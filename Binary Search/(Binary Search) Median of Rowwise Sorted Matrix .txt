
int countLeq(vector<int>&a, int x)
{

    int lb=0 , ub=a.size()-1;
    int mid;
    
    int ind = -1;
    
    while(lb<=ub)
    {
        mid=lb+(ub-lb)/2;
        
        if(a[mid]<=x)
        {
            ind = mid;
            lb = mid + 1;
        }
        else
        {
            ub = mid - 1;
        }
    }
    
    return ind+1;
}


int Solution::findMedian(vector<vector<int> > &A)
{
    int m = A.size();
    int n = A[0].size();
    
    int lb=1 , ub=1e9;
    int mid;
    
    int ans = 1;
    
    
    while(lb<=ub)
    {
        mid=lb+(ub-lb)/2;
        
        int count=0;
        
        for(int i=0;i<m;i++)
        {
            count+=countLeq(A[i],mid);
        }
            
        
        if(count<=(n*m/2))
        {
            ans = mid+1; //median will have floor((nm)/2) elements before it
                         //so if no.of elements leq mid is <=(floor((nm)/2))
                         //then mid+1 is current candidate for the median
            lb=mid+1;
        }
        else
        {
            ub=mid-1;
        }
    }
    
    return ans;  
}