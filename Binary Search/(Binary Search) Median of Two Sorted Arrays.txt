class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2)
    {
        int n1 = nums1.size() , n2 = nums2.size();
        if(n1>n2){return findMedianSortedArrays(nums2,nums1);}
        
        int lb = 0 , ub=n1-1;
        while(lb<=(ub+1))
        {
            int i1 = lb + (ub-lb)/2;
            int i2 = (n1+n2+1)/2 - i1;
            
            if(!(i1>=0 && i1<=n1 && i2>=0 && i2<=n2))
            {
                lb++; continue;
            }
            
            int maxLeft1=INT_MIN , minRight1 = INT_MAX , maxLeft2=INT_MIN , minRight2 = INT_MAX;
            
            if(i1>=1){maxLeft1=nums1[i1-1];}
            if(i1<n1){minRight1 = nums1[i1];}
            
            if(i2>=1){maxLeft2=nums2[i2-1];}
            if(i2<n2){minRight2 = nums2[i2];}
            
            if(max(maxLeft1,maxLeft2)<=min(minRight1,minRight2))
            {
                if((n1+n2)&1){return max(maxLeft1,maxLeft2);}
                else
                {
                    double maxEl = (double)(max(maxLeft1,maxLeft2)) , secMax = (double)(min(minRight1,minRight2));
                    return (double)((maxEl+secMax)/(double)2);
                }
            }
            else if(maxLeft1>minRight2){ub=i1-1;}
            else if(maxLeft2>minRight1){lb=i1+1;}
        }
        
        return -1;
        
    }
};