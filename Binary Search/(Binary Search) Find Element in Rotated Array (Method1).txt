class Solution {
public:
    int findMinValInd(vector<int>&nums, int n) 
    {
        int lb=0, ub=n-1, mid;
        
        while(lb<=ub) {
            
            mid = lb + (ub-lb)/2;
            
            if(lb==ub){return mid;}
            if((mid-1)>=0 && nums[mid-1] > nums[mid]){return mid;}
            if((mid+1)<n  && nums[mid+1] < nums[mid]){return mid + 1;}
            
            if(nums[mid] >= nums[lb] && nums[mid] >= nums[ub]) {
                lb = mid + 1;
            }
            else if(nums[mid] <= nums[lb] && nums[mid] <= nums[ub]) {
                ub = mid - 1;
            }
            else if(nums[mid] >= nums[lb] && nums[mid] <= nums[ub]) {
                ub = mid - 1;
            }
        }
        return 0;
    }
    int findIndex(vector<int>&nums, int lb, int ub, int target) 
    {
        int mid;
        while(lb<=ub) {
            mid = lb + (ub-lb)/2;
            if(nums[mid] == target){return mid;}
            else if(nums[mid] > target){ub = mid - 1;}
            else{lb = mid + 1;}
        }
        
        return -1;
    }
    int search(vector<int>& nums, int target) 
    {
        int n = nums.size();
        int minValInd = findMinValInd(nums, n);
        
    
        int ans1 = findIndex(nums, 0, minValInd-1, target);
        int ans2 = findIndex(nums, minValInd, n-1, target);
        
        return max(ans1, ans2);
    }
};