// https://www.youtube.com/watch?v=xlVX7dXLS64

#include <bits/stdc++.h>
using namespace std;

#define ll long long 
#define vll vector<long long>
#define f first
#define s second
#define pb push_back
#define printoneline(arr,a,b) for(long long i=a;i<=b;i++){cout<<arr[i]<<" ";} cout<<"\n";
#define sort(a) sort(a.begin(),a.end());
#define rsort(a) sort(a.rbegin(),a.rend());
#define reverse(a) reverse(a.begin(),a.end());



bool allowed(pair<ll,ll> p,vector<vll> &grid,ll start)
{
    ll x=p.f;
    ll y=p.s;
    
    ll m=grid.size();
    ll n=grid[x].size();
    
    return (x>=0 && y>=0 && x<m && y<n && grid[x][y]==start);
}


vector<pair<ll,ll>> neighbours(vector<vll> &grid,pair<ll,ll> p,ll start)
{
    ll x=p.f;
    ll y=p.s;
    
    vector<pair<ll,ll>> verified;
    
    if(allowed({x-1,y},grid,start))
    {
        verified.pb({x-1,y});
    }
    if(allowed({x+1,y},grid,start))
    {
        verified.pb({x+1,y});
    }
    if(allowed({x,y+1},grid,start))
    {
        verified.pb({x,y+1});
    }
    if(allowed({x,y-1},grid,start))
    {
        verified.pb({x,y-1});
    }
    
    
    return verified;
}


void fill(vector<vll> &grid,ll x0,ll y0,ll start) 
{
    map <pair<ll,ll>,bool> visited;
    queue<pair<ll,ll>> q;
    
    q.push({x0,y0});
    
    while(!q.empty())
    {
        pair<ll,ll> curr_pos=q.front();
        q.pop();
        if(!visited[curr_pos])
        {
            visited[curr_pos]=true;
            ll x=curr_pos.f,y=curr_pos.s;
            grid[x][y]=5;
            for(auto p:neighbours(grid,curr_pos,start))
            {
                q.push(p);
            }
        }
    }
    
    return;
}


int main()
{
    ll m,n,i,j,x0,y0;

    cout<<"Enter number of rows and columns\n";
    cin>>m>>n;
    cout<<"Enter grid\n";
    cout<<"\n";
    vector<vll> grid(m,vll(n));
    
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            cin>>grid[i][j];
        }
    }
    
    
    cout<<"Enter starting cell\n";
    cin>>x0>>y0;
    
    ll start=grid[x0][y0];
    
    fill(grid,x0,y0,start);
    
    cout<<"The filled grid is\n";
    cout<<"\n";
    
    for(i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            cout<<grid[i][j]<<" ";
        }
        cout<<"\n";
    }
    
    return 0;
}
