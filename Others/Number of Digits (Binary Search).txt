#include <bits/stdc++.h>
using namespace std;

#define ll long long 
#define vll vector<long long>
#define vi vector<int>
#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define sort(a) sort(a.begin(),a.end());
#define rsort(a) sort(a.rbegin(),a.rend());
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}


ll no_of_digits(ll a,ll x,ll b)
{
    long double l1,l2,r;
    ll ans;
    
    l1=log(a)+ x*(log(x));
    l2=log(b);
    r=l1/l2;
    
    ans=floor(r);
    ans++;
    
    return ans;
}

/*Given a,n,b find the number of x in 1<=x<=(10^9) such that a*(x^x) has n-digits in base b*/

int main()
{
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL);
    ll a,n,b;
    
    while(cin>>a>>n>>b)
    {
    
    ll first_great_or_eq,first_great;
    
    ll lb=0,ub=1000000000,mid;
    
    ll num_digs;
    
    while(lb<=ub)
    {
        mid=(lb+ub)/2;
        num_digs=(no_of_digits(a,mid,b));
        
        if(num_digs<n)
        {
            lb=mid+1;
        }
        
        else
        {
            ub=mid-1;
        }
    }
    
    first_great_or_eq=lb; //This is the first x for which number of digits in a(x^x) is >=n
    
    lb=0;
    ub=1000000000;
    
    while((lb<=ub))
    {
        mid=(lb+ub)/2;
        num_digs=(no_of_digits(a,mid,b));
        if(num_digs<=n)
        {
            lb=mid+1;
        }
        
        else
        {
            ub=mid-1;
        }
    }
    
    first_great=lb; //This is the first x for which number of digits in a(x^x) is >n
    
    cout<<(first_great)-(first_great_or_eq)<<"\n";
    }
    return 0;
}
