#define ll long long
ll mod = 1000003;

ll mod_pow(ll a,ll n)
{
    if(a==0){return 0;}
    if(n==0){return 1;}
    
    ll half = mod_pow(a,n/2);
    
    if(n&1)
    {
        return (((half*half)%mod)*a)%mod;
    }
    
    return ((half*half)%mod);
}

ll mod_inverse(ll a)
{
    //(1/a)%mod = (a^(mod-2))%mod
    return mod_pow(a,mod-2);
}

int Solution::findRank(string A) 
{
    ll ans = 0;
    
    vector<int> freq(256,0);
    for(auto c : A){freq[c]++;}
    
    ll n = A.size();
    vector<ll> fact(n+1);
    fact[0]=fact[1]=1;
    for(ll i=2;i<=n;i++){fact[i] = (fact[i-1]*i)%mod;}
    
    for(auto c : A)
    {
        char req = c;
        
        //Now we find the number of permutations with the first letter
        //lexicographically smaller than the actual required letter at that position
        //and then the actual required character is removed from the set of avaiable characters
        
        //eg:- GOOGLE
        //actual required = G
        //lexicographically smaller = {E}
        //Hence, with E as first letter, others = {G,G,O,O,L}
        //no.of permutations = (5!)/(2! * 2!)
        //now we have handled one G, so avaiable set = {O,O,G,L,E}
        
        for(ll i=0;i<256;i++)
        {
            if(freq[i]==0){continue;}
            
            if(((char)(i))==req){break;}
            
            freq[i]--;
            
            ll curr_ans = 1;
            ll total_freq = 0;
            
            for(ll j=0;j<256;j++)
            {
                if(freq[j]==0){continue;}
                
                curr_ans = (curr_ans * mod_inverse(fact[freq[j]]))%mod;
                total_freq+=freq[j];
            }
            
            curr_ans = (curr_ans*fact[total_freq])%mod;
            
            ans = (ans + curr_ans)%mod;
            
            freq[i]++;
        }
        
        freq[req]--;
    }
    
    ans = (ans + 1)%mod;
    return ans;    
}
