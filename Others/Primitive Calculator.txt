/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include<vector>
#include<math.h>
using namespace std;

int main()
{
    /*You are given a primitive calculator that can perform the following three operations with
the current number 洧논: multiply 洧논 by 2, multiply 洧논 by 3, or add 1 to 洧논. Your goal is given a
positive integer 洧녵, find the minimum number of operations needed to obtain the number 洧녵
starting from the number 1.*/
    
    int num,n,i;
    cout<<"Enter a number:\n";
    cin>>num;
    vector<int> minops(num+1);
    minops[0]=0;
    minops[1]=0;
    for(n=2;n<=num;n++)
    {
        if(n%2==0 && n%3==0)
        {
            minops[n]=min((minops[n/2]+1),min((minops[n/3]+1),(minops[n-1]+1)));
        }
        if(n%2==0 && n%3!=0)
        {
            minops[n]=min((minops[n/2]+1),(minops[n-1]+1));
        }
        if(n%2!=0 && n%3==0)
        {
            minops[n]=min((minops[n/3]+1),(minops[n-1]+1));
        }
        if(n%2!=0 && n%3!=0)
        {
            minops[n]=(minops[n-1]+1);
        }
    }
    cout<<minops[num]<<"\n";
    
    vector<int> trace(minops[num]+1);
    trace[0]=1;
    trace[minops[num]]=num;
    
    n=num;
    int k=minops[num]-1;
    while(k>0)
    {
       if(n%2==0 && minops[n]==(minops[n/2]+1))
        {
            trace[k]=n/2;
            k--;
            n=n/2;
        }
        else if(n%3==0 && minops[n]==(minops[n/3]+1))
        {
            trace[k]=n/3;
            k--;
            n=n/3;
        }
        else if(minops[n]==(minops[n-1]+1))
        {
            trace[k]=n-1;
            k--;
            n=n-1;
        }
    }
    
    for(i=0;i<minops[num]+1;i++)
    {
        cout<<trace[i]<<" ";
    }
    
    return 0;
}
