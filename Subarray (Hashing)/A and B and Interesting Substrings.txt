#include <bits/stdc++.h>
using namespace std;

// https://codeforces.com/contest/519/problem/D

#define ll long long 
#define ld long double 
#define vll vector<long long>
#define vi vector<int>
#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define sort(a) sort(a.begin(),a.end());
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}
#define cy cout<<"YES\n";
#define cn cout<<"NO\n";
#define cig cin.ignore();
typedef vector<pair<ll,ll>> vpll;
typedef vector<pair<int,int>> vpii;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<int,pair<int,int>> ppi;

ll inf=std::numeric_limits<long long>::max();

void setIO(string name = "") 
{ 
    ios_base::sync_with_stdio(0); cin.tie(0); 
    
    if(name!="")
    {
        freopen((name+".in").c_str(), "r", stdin);
	    freopen((name+".out").c_str(), "w", stdout);
    }
}

int main()
{
    setIO("");
    
    vll a(26);
    input(a);
    
    
	cig;
	
	string str;
	cin>>str;
	
	ll len = str.length() , i , j;
	ll ans = 0;
	
	for(j=0;j<26;j++)
	{
	    ll curr_ans = 0;
	    
	    char c = (char)('a' + j);
	    
	    //Now for this letter, we find the sum of segments between this letter
	    
	    bool found = false;
	    vll segment_sums;
	    
	    ll curr_sum = 0;
	    
	    for(i=0;i<len;i++)
	    {
	        if(str[i]==c)
	        {
	            if(found){segment_sums.pb(curr_sum);}
	            
	            curr_sum = 0; found = true;
	        }
	        else
	        {
	            curr_sum+=a[str[i]-'a'];
	        }
	    }
	    
	    map<ll,ll> freq_psum;
	    curr_sum = 0;
	    
	    for(i=0;i<segment_sums.size();i++)
	    {
	        curr_sum+=segment_sums[i];
	        if(curr_sum==0)
	        {
	            curr_ans++;
	        }
	        
	        curr_ans+=freq_psum[curr_sum];
	        
	        //in curr_sum, we have not yet included the beginning of the current segment
	        //but that is fine, because lets say the sum of three segments and the two characters c
	        //in between is equal to zero i.e c[]c[]c[]c
	        //here we have considered the score of the first character c which we are not supposed to
	        //consider, however it compensates for not considering the beginning of the current segment
	        
	        curr_sum+=a[c-'a']; //before moving to the next segment, we add 
	                            //the number of the chosen letter, this is for the 
	                            //letter that is just before the current segment begins
	                            //i.e. c[...segment...] 
	                            
	        freq_psum[curr_sum]++; 
	    }
	    
	    ans+=curr_ans;
	}
	
	
	cout<<ans<<"\n";
  
    return 0;
}
