#include <bits/stdc++.h>
using namespace std;
    
#define ll long long 
#define vll vector<long long>
#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define sort(a) sort(a.begin(),a.end());
#define rsort(a) sort(a.rbegin(),a.rend());
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}
      
//Given an array of n integers, your task is to count the number of 
//subarrays where the sum of values is divisible by k
      
int main () 
{
    ll n,k,i,p_sum=0;
    cin>>n>>k;
    vll a(n);
    
    input(a);
    
    /*Logic:
    Any prefix sum can be written as p_sum=(q*k)+r     ....q=quotient,r=remainder
    Hence, if any subarray sum is divisible by k then:
    (q1-q2)*k+(r1-r2) must be divisible by k => r1=r2
    Thus we want to find pairs of prefix sums for which (p_sum)%k is equal 
    */
    
    map<ll,ll> freq_rem;
    
    freq_rem[0]=1;  //for the empty(sum of zero elements) prefix sum, remainder=0
    
    for(i=0;i<n;i++)
    {
        p_sum+=a[i];
        
        freq_rem[((p_sum%k)+k)%k]++;
        
        //this should ideally be (p_sum)%k but we want to account for p_sum<0
    }
    
    ll count=0;
    
    for(auto x:freq_rem)
    {
        count+=((x.s)*(x.s-1))/2;
    }
    
    cout<<count<<"\n";
    
    return 0;
}
