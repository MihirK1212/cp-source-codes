vector<int> Solution::slidingMaximum(const vector<int> &A, int K) 
{
    int n = A.size();
    K = min(n,K);
    
    deque<int> q;
    vector<int> ans;
    
    for(int i=0;i<K;i++)
    {
        while(!q.empty() && A[i]>q.back()){q.pop_back();} //we use strictly greater so that multiple copies are preserved
        q.push_back(A[i]);
    }
    
    int lb=0,ub=K-1;
    
    while(lb<=ub && ub<n)
    {
        ans.push_back(q.front());
        
        if(q.front()==A[lb]){q.pop_front();} //since we are preserving multiple copies, if A[lb]==curr_max, then only one copy of curr_max will be deleted
        
        if((ub+1)<n)
        {
            while(!q.empty() && A[ub+1]>q.back()){q.pop_back();}
            q.push_back(A[ub+1]);
        }        
        
        lb++; ub++;
    }
    
    return ans;
    
}
