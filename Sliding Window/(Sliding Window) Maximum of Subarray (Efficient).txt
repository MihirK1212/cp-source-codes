vector<int> Solution::slidingMaximum(const vector<int> &A, int B) 
{
    int n = A.size();
    vector<int> ans;

    if(B>n)
    {
        int maxVal = INT_MIN;
        for(int i=0;i<n;i++){maxVal = max(maxVal,A[i]);}
        ans.push_back(maxVal);
    }
    else
    {
        deque<int> dq;

        for(int i=0;i<B;i++)
        {
            if(dq.empty()){dq.push_front(i); continue;}

            while(!dq.empty() && A[i]>=A[dq.back()])
            {
                dq.pop_back();
            }

            dq.push_back(i);
        }

        int start=0,end=B-1;
        while(start<=end && end<n)
        {
            while(!dq.empty() && !(dq.front()>=start && dq.front()<=end)){dq.pop_front();}
            ans.push_back(A[dq.front()]);

            if((end+1)<n)
            {
                int i = end+1;
                while(!dq.empty() && A[i]>=A[dq.back()])
                {
                    dq.pop_back();
                }

                dq.push_back(i);
            }

            start++; end++;
        }

    }

    return ans;
};