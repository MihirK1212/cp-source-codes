vector<int> maxCount(vector<int>&A)
{
    int i = 0;
    
    int lb_ans = -1 , ub_ans = -1;
    int max_len = 0;
    
    while(i<A.size())
    {
        if(A[i]==0){i++; continue;}
        
        int lb=i,ub=i;
        while(i<A.size() && A[i]==1){ub=i; i++;}
        
        if((ub-lb+1)>max_len)
        {
            max_len = (ub-lb+1);
            lb_ans=lb; ub_ans=ub;
        }
    }
    
    vector<int> ans;
    
    if(max_len==0){return ans;}
    
    for(int i=lb_ans;i<=ub_ans;i++){ans.push_back(i);}
    
    return ans;
}
vector<int> Solution::maxone(vector<int> &A, int M) 
{
    if(M==0){return maxCount(A);}
    
    int n = A.size();
    
    int currFlips = 0;
    
    int lb=0,ub=0;
    
    int lb_ans=0,ub_ans=n-1;
    int max_len = 0;
    
    if(A[0]==0){currFlips++;}
    
    
    while(lb<=ub && ub<n)
    {
        if((ub-lb+1)>max_len)
        {
            max_len = ub-lb+1;
            lb_ans = lb; ub_ans = ub;
        }   
        
        if((ub+1)<n && A[ub+1]==1){ub++;}
        
        else if((ub+1)<n && A[ub+1]==0)
        {
            if(currFlips==M)
            {
                while(lb<n && A[lb]!=0){lb++;}
                lb++;
                
                currFlips--;
                
                if(lb>ub && lb<n){ub=lb; currFlips=(A[lb]==0);}
            }
            else{ub++; currFlips++;}
        }
        
        else
        {
            if(A[lb]==0){currFlips--;}
            
            lb++;
            if(lb>ub && lb<n){ub=lb; currFlips=(A[lb]==0);}
        }
    }
    
    vector<int> ans;
    for(int i=lb_ans;i<=ub_ans;i++){ans.push_back(i);}
    
    return ans;
}
