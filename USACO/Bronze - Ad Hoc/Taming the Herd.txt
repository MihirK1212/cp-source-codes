#include <bits/stdc++.h>
using namespace std;

#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define all(x) (x).begin(), (x).end()
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}
#define cy cout<<"YES\n";
#define cn cout<<"NO\n";
#define cig cin.ignore();
typedef long long ll;
typedef long double  ld;
typedef vector<long long> vll;
typedef vector<int> vi;
typedef vector<pair<ll,ll>> vpll;
typedef vector<pair<int,int>> vpii;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<int,pair<int,int>> ppi;

ll inf=std::numeric_limits<long long>::max();

ll ceilVal(ll a,ll b)
{
   return ceil(((ld)a)/((ld)b)); 
}

void setIO(string name = "") 
{ 
    ios_base::sync_with_stdio(0); cin.tie(0); 
    
    if(name!="")
    {
        freopen((name+".in").c_str(), "r", stdin);
	    freopen((name+".out").c_str(), "w", stdout);
    }
}

void solve()
{
    ll n,i;
    cin>>n;
    
    vll a(n);
    input(a);
    
    ll should_be = -1;
    bool found = false;
    
    bool ans = true;
    
    ll max_ans = 0;
    
    i = n-1;
    while(i>=0)
    {
        if(a[i]==-1 && found)
        {
            a[i] = should_be;
            
            if(a[i]==0){max_ans++; found = false;}
            should_be = a[i] - 1;
        }
        else if(a[i]==-1 && !found)
        {
            max_ans++;
        }
        else if(a[i]==0 && !found){max_ans++;}
        else if(a[i]==0 && found)
        {
            if(a[i]!=should_be){ans = false; break;}
            max_ans++;
            found = false;
            should_be = a[i] - 1;
        }
        else if(a[i]>0 && found)
        {
            if(a[i]!=should_be){ans = false; break;}
            should_be = a[i] - 1;
        }
        else if(a[i]>0 && !found)
        {
            found = true;
            should_be = a[i] - 1;
        }
        
        i--;
    }
    
    ll min_ans = 0;
    
    if(a[0]!=-1 && a[0]!=0){ans = false;}
    else 
    {
        a[0] = 0;
        should_be = 1;
        i = 1;
        
        while(i<n)
        {
            if(a[i]==-1){a[i]=should_be; should_be = a[i] + 1;}
            else if(a[i]==0){should_be = 1;}
            else if(a[i]!=should_be){ans = false; break;}
            else{should_be = a[i] + 1;}
            
            i++;
        }
        
        for(auto x : a){min_ans+=(x==0);}
    }
    
    if(!ans){cout<<-1<<"\n";}
    else{cout<<min_ans<<" "<<max_ans<<"\n";}
    
}

//http://www.usaco.org/index.php?page=viewproblem2&cpid=809

int main()
{
    // setIO("");
    setIO("taming");
    
    ll T = 1;
    
    while(T--)
    {
        solve();
    }
    
    return 0;
}
