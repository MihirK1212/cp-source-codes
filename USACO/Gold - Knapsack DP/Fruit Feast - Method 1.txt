#include<iostream>
#include <vector>
#include<string>
#include <map>
#include<cmath>
#include <set>
#include<queue>
#include<algorithm>
#include<cstdlib>
using namespace std;

#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define all(x) (x).begin(), (x).end()
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}
#define cy cout<<"YES\n";
#define cn cout<<"NO\n";
#define cig cin.ignore();
typedef long long ll;
typedef long double  ld;
typedef vector<long long> vll;
typedef vector<int> vi;
typedef vector<pair<ll,ll>> vpll;
typedef vector<pair<int,int>> vpii;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<int,pair<int,int>> ppi;

ll inf=std::numeric_limits<long long>::max();

ll ceilVal(ll a,ll b)
{
   return ceil(((ld)a)/((ld)b)); 
}

void setIO(string name = "") 
{ 
    ios_base::sync_with_stdio(0); cin.tie(0); 
    
    if(name!="")
    {
        freopen((name+".in").c_str(), "r", stdin);
        freopen((name+".out").c_str(), "w", stdout);
    }
}


ll solve(ll T,ll A,ll B)
{
    ll i;
    vector<vector<bool>> dp(T+1,vector<bool>(2));

    dp[0][0] = true;
    //dp[i][flg] = Wether we can reach 'i', (by using halving flg=1) or (without using halving flg=0)

	for (i = 0; i <= T; ++i) 
    {
        if((i-A)>=0){dp[i][0] = dp[i][0] || dp[i-A][0];}
        if((i-B)>=0){dp[i][0] = dp[i][0] || dp[i-B][0];}
		dp[i/2][1] = dp[i/2][1] ||  dp[i][0];
	}
	for (i = 0; i <= T ; ++i) 
    {
		if ((i-A)>=0){dp[i][1] = dp[i][1] || dp[i-A][1];}
		if ((i-B)>=0){dp[i][1] = dp[i][1] || dp[i-B][1];}
	}
	for (i = T; i >= 0; --i) 
    {
        if (dp[i][1]) 
        {
            return (ll)i;
            break;
        }
	}
	return 0;
}

//http://www.usaco.org/index.php?page=viewproblem2&cpid=574

int main()
{
    setIO("feast");
    srand((unsigned) time(NULL)); 

    ll T,A,B;
    cin>>T>>A>>B;

    cout<<solve(T,A,B)<<"\n";
    return 0;
}
