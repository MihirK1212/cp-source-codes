#include <bits/stdc++.h>
using namespace std;

#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define all(x) (x).begin(), (x).end()
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}
#define cy cout<<"YES\n";
#define cn cout<<"NO\n";
#define cig cin.ignore();
typedef long long ll;
typedef long double  ld;
typedef vector<long long> vll;
typedef vector<int> vi;
typedef vector<pair<ll,ll>> vpll;
typedef vector<pair<int,int>> vpii;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<int,pair<int,int>> ppi;

ll inf=std::numeric_limits<long long>::max();

ll ceilVal(ll a,ll b)
{
   return ceil(((ld)a)/((ld)b)); 
}

long long power(long long a,long long n)
{
    if(n==0){return 1;}
    
    long long half;
    half=power(a,n/2);
    if(n%2==0){return half*half;}
    else{return half*half*a;}
}

void setIO(string name = "") 
{ 
    ios_base::sync_with_stdio(0); cin.tie(0); 
    
    if(name!="")
    {
        freopen((name+".in").c_str(), "r", stdin);
	    freopen((name+".out").c_str(), "w", stdout);
    }
}

bool cmpy(vll&p1,vll&p2)
{
    return p1[1]<p2[1];
}

bool cmp(vll&p1,vll&p2)
{
    if(p1[0]==p2[0])
    {
        return p1[1]<p2[1];
    }
    
    return p1[0]<p2[0];
}

bool is_rect(vector<vll>&points,ll i,ll j)
{
    return points[i][0]<points[j][0] && points[i][1]<points[j][1];
}

ll solve()
{
    ll n,i,j;
    cin>>n;
    
    vector<vll> points;
    
    for(i=1;i<=n;i++)
    {
        ll x,y;
        cin>>x>>y;
        
        points.pb({x,y});
    }
    
    sort(all(points));
    
    for(i=0;i<n;i++)
    {
        points[i][0] = i;
    }
    
    sort(all(points),cmpy);
    
    for(i=0;i<n;i++)
    {
        points[i][1] = i;
    }
    
    sort(all(points),cmp);
    
    vector<vll> A(n,vll(n,0));
    for(auto v : points)
    {
        A[v[0]][v[1]]++;
    }
    
    vector<vll> dp(n,vll(n,0));
    
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            dp[i][j]+=A[i][j];
            
            if(i){dp[i][j]+=dp[i-1][j];}
            if(j){dp[i][j]+=dp[i][j-1];}
            if(i && j){dp[i][j]-=dp[i-1][j-1];}
        }
    }
    
    vector<vector<bool>> done(n,vector<bool>(n,false));
    ll x1,y1,x2,y2,sum;
    ll ans = 0;
    
    for(i=0;i<n;i++)
    {
        for(j=i+1;j<n;j++)
        {
            x1 = min(points[i][0],points[j][0]);
            y1 = min(points[i][1],points[j][1]);
            x2 = max(points[i][0],points[j][0]);
            y2 = max(points[i][1],points[j][1]);
            
            if(x1<x2 && y1<y2 && !done[x1])
            {
                sum = dp[x2][y2];
                if(x1){sum-= dp[x1-1][y2];}
                if(y1){sum-= dp[x2][y1-1];}
                if(x1 && y1){sum+= dp[x1-1][y1-1];}
                
                sum-=2;
                
                ans+=power(2,sum);
            }
        }
    }
    
    ans++;  //empty
    ans+=n; //single element
    
    return ans;
    
}

int main()
{
    setIO("");
    
    ll T = 1;
    
    while(T--)
    {
        cout<<solve()<<"\n";
    }
    
    return 0;
}
