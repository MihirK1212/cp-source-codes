#include <bits/stdc++.h>
using namespace std;

#define ll long long 
#define vll vector<long long>
#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define sort(a) sort(a.begin(),a.end());
#define rsort(a) sort(a.rbegin(),a.rend());
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}

ll dfs(map<ll,vll> &graph,ll node,vector<bool> &visited)
{
    visited[node]=true;
    ll numvisited=1;
    for(auto x:graph[node])
    {
        if(!visited[x])
        {
            //cout<<"Visited "<<x<<"\n";
            numvisited=numvisited+dfs(graph,x,visited);
        }
    }
    //cout<<"Dead-end "<<node<<"\n";
    return numvisited;
}


int main()
{
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL);
    ll n,m,k,i;
    cin>>n>>m>>k;
    
    map<ll,vll> graph;
    
    for(i=1;i<=m;i++)
    {
        ll a,b;
        cin>>a>>b;
        graph[a].pb(b);
        graph[b].pb(a);
    }
    
    vector<bool> visited(n,false);
    
    ll components=0;
    
    for(i=1;i<=n;i++)
    {
        if(!visited[i])
        {
            components++;
            dfs(graph,i,visited);
        }
    }
    
    //A graph with 'n' nodes and 'k' connected components will have a minimum (n-k) edges
    
    
    return 0;
}
