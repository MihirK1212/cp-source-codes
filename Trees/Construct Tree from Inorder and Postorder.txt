/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructTree(vector<int>& inorder, vector<int>& postorder,int inLB, int inUB, int postUB)
    {
        if(postUB<0 || inLB>inUB){return NULL;}
        
        TreeNode* root = new TreeNode(postorder[postUB]);
        
        int rootVal = postorder[postUB] , rootIndex;
        
        for(int i=inLB;i<=inUB;i++){if(inorder[i]==rootVal){rootIndex=i; break;}}
        
        
        
        root->left = constructTree(inorder,postorder,inLB,rootIndex-1,postUB-(inUB-rootIndex+1));
        root->right = constructTree(inorder,postorder,rootIndex+1,inUB,postUB-1);
        
        return root;
    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder)
    {
        return constructTree(inorder,postorder,0,inorder.size()-1,postorder.size()-1);    
    }
};