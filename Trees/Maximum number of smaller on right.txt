#include <iostream>
#include <bits/stdc++.h>
using namespace std;

//https://practice.geeksforgeeks.org/problems/smaller-on-right/0/?track=DSASP-BST&batchId=154#

struct Node
{
    Node* left;
    Node* right;
    int l_size;
    int data;
    
    Node(int val)
    {
        left = right = NULL;
        l_size =  0; 
        data = val;
    }
};


Node* insert(Node* root,int x)
{
    if(root==NULL){return new Node(x);}
    
    if(x<(root->data))
    {
        root->l_size = root->l_size + 1;
        root->left = insert(root->left,x);
    }
    else if(x>(root->data))
    {
        root->right = insert(root->right,x);
    }
    
    
    
    return root;
}

int findAns(Node* root,int x)
{
    if(root==NULL){return 0;}
    
    if(x==(root->data)){return root->l_size;}
    else if(x<(root->data)){return findAns(root->left,x);}
    else{return root->l_size + 1 + findAns(root->right,x);}
    
    return 0;
}

int main() {
	int T;
	cin>>T;
	while(T--)
	{
	    int n;
	    cin>>n;
	    
	    vector<int> a(n);
	    for(int i=0;i<n;i++){cin>>a[i];}
	    
	    unordered_map<int,bool> exists;
	    
	    Node* root = new Node(a[n-1]);
	    
	    int ans = 0;
	    
	    for(int i=n-2;i>=0;i--)
	    {
	        if(!exists[a[i]]){root = insert(root,a[i]);}
	        ans = max(ans,findAns(root,a[i]));
	        exists[a[i]] = true;
	    }
	    
	    cout<<ans<<"\n";
	}
	return 0;
}