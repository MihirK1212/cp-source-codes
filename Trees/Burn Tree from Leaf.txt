/**
 * Definition for binary tree
 * struct TreeTreeNode {
 *     int val;
 *     TreeTreeNode *left;
 *     TreeTreeNode *right;
 *     TreeTreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

pair<int,int> find(TreeNode* root, int target , int&res)
{
    if(root==NULL){return {0,-1};}
    if((root->val)==target){return {1,0};}
    
    pair<int,int> res1 = find(root->left,target,res);
    pair<int,int> res2 = find(root->right,target,res);
    
    int lh=res1.first , rh=res2.first;
    int ld=res1.second , rd=res2.second;
    
    int dist=-1,h=0;
    
    h = max(lh,rh) + 1;
    
    if(ld!=-1)
    {
        dist = ld+1;
        res = max(res,dist+rh);
    }
    else if(rd!=-1)
    {
        dist = rd+1;
        res = max(res,dist+lh);
    }
    
    return {h,dist};
}
int Solution::solve(TreeNode* A, int B) 
{
    int res = 0;
    find(A,B,res);
    return res;
}
