https://leetcode.com/problems/minimum-weighted-subgraph-with-the-required-paths-ii/description/

You are given an undirected weighted tree with n nodes, numbered from 0 to n - 1. It is represented by a 2D integer array edges of length n - 1, where edges[i] = [ui, vi, wi] indicates that there is an edge between nodes ui and vi with weight wi.â€‹

Additionally, you are given a 2D integer array queries, where queries[j] = [src1j, src2j, destj].

Return an array answer of length equal to queries.length, where answer[j] is the minimum total weight of a subtree such that it is possible to reach destj from both src1j and src2j using edges in this subtree.

A subtree here is any connected subset of nodes and edges of the original tree forming a valid tree.




For any node x, let f(x) be the distance from the root to x. Then for two nodes x and y:d(x, y) = f(x) + f(y) - 2 * f(LCA(x, y))

For three nodes a, b and c, the minimum total weight of the subtree connecting all three is:(d(a, b) + d(b, c) + d(c, a)) / 2, where d(x, y) is the distance between nodes x and y