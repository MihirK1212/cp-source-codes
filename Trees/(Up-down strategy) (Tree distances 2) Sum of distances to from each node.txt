#include <bits/stdc++.h>
using namespace std;

#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define all(x) (x).begin(), (x).end()
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}
#define cy cout<<"YES\n";
#define cn cout<<"NO\n";
#define cig cin.ignore();
typedef long long ll;
typedef long double  ld;
typedef vector<long long> vll;
typedef vector<int> vi;
typedef vector<pair<ll,ll>> vpll;
typedef vector<pair<int,int>> vpii;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<int,pair<int,int>> ppi;

ll inf=std::numeric_limits<long long>::max();

ll ceilVal(ll a,ll b)
{
   return ceil(((ld)a)/((ld)b)); 
}

void setIO(string name = "") 
{ 
    ios_base::sync_with_stdio(0); cin.tie(0); 
    
    if(name!="")
    {
        freopen((name+".in").c_str(), "r", stdin);
	    freopen((name+".out").c_str(), "w", stdout);
    }
}

ll findSubtreeSize(vector<vll>&graph,ll u,ll par,vll&subtreeSize)
{
    ll sz = 1;
    
    for(auto v : graph[u])
    {
        if(v==par){continue;}
        
        sz+=findSubtreeSize(graph,v,u,subtreeSize);
    }
    
    subtreeSize[u] = sz;
    return sz;
}

void findChildrenDistSum(vector<vll>&graph,ll u,ll par,vll&subtreeSize,vll&childrenDistSum)
{
    for(auto v : graph[u])
    {
        if(v==par){continue;}
        
        findChildrenDistSum(graph,v,u,subtreeSize,childrenDistSum);
        
        childrenDistSum[u]+=(subtreeSize[v] + childrenDistSum[v]); // sum of distances of u from nodes in the subtree rooted at v
    }
}

void dfs(vector<vll>&graph,ll u,ll par,vll&childrenDistSum,vll&subtreeSize,vll&ans_up,vll&ans_down)
{
    ll n = graph.size() - 1;

    for(auto v : graph[u])
    {
        if(v==par){continue;}
        
        ans_down[u]+=(subtreeSize[v] + childrenDistSum[v]);
        dfs(graph,v,u,childrenDistSum,subtreeSize,ans_up,ans_down);
    }
    
    if(par!=-1)
    {
	ans_up[u]+= ( childrenDistSum[par] - (subtreeSize[u] + childrenDistSum[u]) + (subtreeSize[par] - subtreeSize[u]) ); //for paths coming from siblings of u , and from parent
        if(ans_up[par]>0){ans_up[u]+= ( (n - subtreeSize[par]) + ans_up[par] );} //for paths coming from the nodes above parent (not including parent)
    }
    
    
}

//https://cses.fi/problemset/result/5280437/

void solve()
{
    ll n,i;
    cin>>n;
    
    vector<vll> graph(n+1);
    
    for(i=1;i<n;i++)
    {
        ll u , v;
        cin>>u>>v;
        graph[u].pb(v); graph[v].pb(u);
    }
    
    vll subtreeSize(n+1,0);
    findSubtreeSize(graph,1,-1,subtreeSize);
    
    
    vll childrenDistSum(n+1,0);
    findChildrenDistSum(graph,1,-1,subtreeSize,childrenDistSum);
    
    vll ans_up(n+1,0);
    vll ans_down(n+1,0);
    
    dfs(graph,1,-1,childrenDistSum,subtreeSize,ans_up,ans_down);
    
    for(i=1;i<=n;i++){cout<<ans_up[i]+ans_down[i]<<" ";} cout<<"\n";
}

int main()
{
    setIO("");
    
    ll T = 1;
    
    while(T--)
    {
        solve();
    }
    
    return 0;
}
