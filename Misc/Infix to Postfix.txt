// { Driver Code Starts
// C++ implementation to convert infix expression to postfix
#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends

class Solution
{
    public:
    //Function to convert an infix expression to a postfix expression.
    int priority(char c)
    {
        if(c=='(' || c==')'){return 0;}
        if(c=='+' || c=='-'){return 1;}
        if(c=='*' || c=='/'){return 2;}
        return 3;
    }
    string infixToPostfix(string s)
    {
        stack<char> stck;
        
        string ans="";
        
        for(auto c: s)
        {
            if(c>='a' && c<='z'){ans+=c;  }
            else if(c=='('){stck.push(c);}
            else if(c==')')
            { 
                while(!stck.empty())
                {
                    char x = stck.top(); stck.pop();
                    if(x=='('){break;}
                    ans+=x;
                }
            }
            else
            {
                int pr1,pr2;
                pr1 = priority(c);
                
                while(!stck.empty())
                {
                    char x = stck.top();
                    pr2 = priority(x);
                
                    // cout<<c<<" "<<x<<" "<<pr1<<" "<<pr2<<"\n";
                    if(pr1>pr2)
                    {
                        break;
                    }
                    else
                    {
                        stck.pop();
                        if(x=='('){continue;}
                        ans+=x;
                    }
                }
                stck.push(c);
            }
        }
        
        while(!stck.empty()){ans+=stck.top(); stck.pop();}
        
        return ans;
    }
};


// { Driver Code Starts.
//Driver program to test above functions
int main()
{
    int t;
    cin>>t;
    cin.ignore(INT_MAX, '\n');
    while(t--)
    {
        string exp;
        cin>>exp;
        Solution ob;
        cout<<ob.infixToPostfix(exp)<<endl;
    }
    return 0;
}
  // } Driver Code Ends