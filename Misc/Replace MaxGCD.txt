#include <bits/stdc++.h>
using namespace std;

#define ll long long 
#define vll vector<long long>
#define f first
#define s second
#define pb push_back
#define printoneline(arr) for(long long i=0;i<arr.size();i++){cout<<arr[i]<<" ";} cout<<"\n";
#define sort(a) sort(a.begin(),a.end());
#define rsort(a) sort(a.rbegin(),a.rend());
#define reverse(a) reverse(a.begin(),a.end());
#define input(arr) for(long long i=0;i<arr.size();i++){cin>>arr[i];}


//Replace at most one element of the array to get maximum gcd of the array


ll gcd(ll x,ll y)
{
    if(y==0)
    {
        return x;
    }
    
    return gcd(y,x%y);
}


int main()
{
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL);
    ll n,i;
    cin>>n;
    
    vll a(n);
    
    input(a);
    
    vll gcd_l(n),gcd_r(n);
    
    //gcd_l[i]= gcd of (i+1) terms from left
    //gcd_r[i]= gcd of (i+1) terms from right
    
    /*
        if a0 is replaced then max_gcd= gcd_r[n-2] = gcd of n-1 terms from right
        if a1 is replaced then max_gcd= gcd(gcd_l[0],gcd_r[n-3]) = gcd(gcd of one term from left,gcd of n-2 terms from right)
        .... and so on
        
        if a(n-2) is replaced then max_gcd= gcd(gcd_l[n-3],gcd_r[0])= gcd(gcd of n-2 terms from left, gcd of 1 terms from right)
        if a(n-1) is replaced then max_gcd= gcd_l[n-2]= gcd of n-1 terms form left
    */
    
    gcd_l[0]=a[0];
    gcd_r[0]=a[n-1];
    
    for(i=1;i<n;i++)
    {
        gcd_l[i]=gcd(gcd_l[i-1],a[i]);
    }
    
    for(i=n-2;i>=0;i--)
    {
        gcd_r[n-1-i]=gcd(gcd_r[(n-1-i)-1],a[i]);
    }
    
    ll ans=-10;
    
    for(i=0;i<=(n-3);i++)
    {
        ans=max(ans,gcd(gcd_l[i],gcd_r[n-3-i]));
    }
    
    ans=max(ans,gcd_r[n-2]);
    ans=max(ans,gcd_l[n-2]);
    
    cout<<ans<<"\n";
    
    
    return 0;
}
