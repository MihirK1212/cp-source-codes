class Solution {
public:
    vector<int> getLPSArray(string str) 
    {
        int n = str.length();
        vector<int> lps(n);
        lps[0] = 0;
        for(int i=1; i<n; i++) {
            int j = lps[i-1];
            while(j>0 && str[i] != str[j]) {
                j = lps[j-1];
            }
            if(j==0) {
                lps[i] = (str[i] == str[j]);
            } else {
                lps[i] = j + 1;
            }
        }
        return lps;
    }

    int strStr(string haystack, string needle) 
    {
        vector<int> lps = getLPSArray(needle);

        vector<int> matches;

        int m = haystack.size(), n = needle.size();
        int i = 0, j = 0;
        while(i<m && j<n) {
            if(haystack[i] == needle[j]) {
                i++; j++;
                if(j==n) {matches.push_back(i - n); j=lps[j-1];}
            }
            else {
                if(j==0) {i++;}
                else {j=lps[j-1];}
            }
        }   

        if(matches.size() == 0) {
            return -1;
        }
        return matches[0];
    }
};