class Solution {
public:
    long long mod = 1000000007;
    
    int countPalindromicSubsequences(string A)
    {
        int n = A.length();
        
        vector<vector<int>> prevInd(n,vector<int>(26,-1));
        vector<vector<int>> nextInd(n,vector<int>(26,n));
        
        vector<int> minInd(26,n);
        for(int i=n-1;i>=0;i--)
        {
            minInd[A[i]-'a'] = i;
            
            for(int k=0;k<26;k++){nextInd[i][k] = minInd[k];}
        }
        
        vector<int> maxInd(26,-1);
        for(int i=0;i<n;i++)
        {
            maxInd[A[i]-'a'] = i;
            
            for(int k=0;k<26;k++){prevInd[i][k] = maxInd[k];}
        }
        
        vector<vector<long long>> dp(n,vector<long long>(n,0));
        
        for(int i=0;i<n;i++)
        {
            dp[i][i] = 1;
            if(i<=(n-2)){dp[i][i+1] = 2;}
        }
        
        for(int len=3;len<=n;len++)
        {
            for(int i=0;(i+len-1)<n;i++)
            {
                int j = i + len - 1;
                
                if (A[i] == A[j])
                {
                    int n1 = nextInd[i+1][A[i]-'a'];
                    int n2 = prevInd[j-1][A[i]-'a'];
                    
                    if(n1>n2)
                    {
                        dp[i][j] = (2*dp[i+1][j-1] + 2);
                    }
                    else if(n1==n2)
                    {
                        dp[i][j] = (2*dp[i+1][j-1] + 1);
                    }
                    else
                    {
                        dp[i][j] = (2*dp[i+1][j-1] - dp[n1+1][n2-1]);
                    }
                }
                    
                else
                {
                    dp[i][j] = (dp[i][j - 1] + dp[i + 1][j] - dp[i + 1][j - 1]);
                }
                
                if (dp[i][j]<0) {
                    dp[i][j] = dp[i][j]+mod;
                }
                else {
                    dp[i][j] = dp[i][j]%mod;
                }
            }
        }
        
        long long x = dp[0][n-1];
        
        x%=mod;
        
        
        return x;
    }
};